Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

算法1
(暴力枚举，合法性判断) O(n*2^2n)
生成所有的括号序列，然后用栈逐个检查合法性。

时间复杂度
生成所有括号序列的时间复杂度O(2^2n)，检查的时间复杂度是O(n)，故总时间复杂度是 O(n*2^2n)。




算法2
(直接生成合法的括号序列) O(1/(n+1)*Cn2n)
使用深度优先搜索。
每次可以放置左括号的条件是当前左括号的数目不超过n。
每次可以放置右括号的条件是当前右括号的数目不超过左括号的数目。
时间复杂度
时间复杂度就是答案的个数，该问题是经典的卡特兰数。
O(1/(n+1)*Cn2n)。