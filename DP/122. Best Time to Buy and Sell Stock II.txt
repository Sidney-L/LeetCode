Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

算法 贪心算法
Time O(n), Space O(1)
遍历一次数组，低进高出，把正的价格差相加起来就是最终利润。

可以拆分成以下几种情况，

递增，如[1,2,3]，那么1买3卖 与 每天都买入卖出 等价
递减，如[3,2,1]，赚钱是赚不了的
先高再低，如[1,3,2]，那么只能在1买3卖捞一笔
先低再高，如[2,1,3]，那么同样只能在1买3卖捞一笔
短数组的情况可以推广到所有数组。
