Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


算法
(线性扫描) O(n)
先从前往后扫描，并计算出只买卖一次且第 i 天卖出的最大收益，最大收益等于第 i 天股票的价格减去前 i−1天股票价格的最小值。
扫描过程中用 f[i] 记录前 i 天中买卖一次的最大收益（不一定在第 i 天卖）。

然后枚举第二次交易，从后往前扫描，并计算只买卖一次且第 i 天买入的最大收益，最大收益等于第 i 天之后股票价格的最大值减去 第 i 天的价格，然后加上 f[i−1]，就是第二次交易在 i 天买入，两次交易的总收益的最大值。
枚举过程中维护总收益的最大值即可。

时间复杂度分析：整个数组总共扫描两遍，所以时间复杂度是 O(n)。