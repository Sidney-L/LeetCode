Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]

算法
(动态规划) O(n)
设计状态f[i]表示第i天，当前不持有股票且当前没有发生卖出交易的最大收益；g[i]表示第i天，不持有股票，且当前刚刚卖出股票的最大收益；h[i]表示当前持有股票的最大收益。
状态转移为f[i] = max(f[i - 1], g[i - 1])，表示构成第i天不持有股票且当天无交易有两种方式，一种是前一天也不持有且前一天没有卖出交易，另一种是前一天持有且前一天刚刚卖出股票；二者取最大值。
g[i] = h[i - 1] + prices[i]，表示构成第i天不持有股票且当天有交易仅有一种方式，即当天卖出前一天持有的股票。
h[i] = max(h[i - 1], f[i - 1] - prices[i])，表示构成第i天持有股票有两种方式，一种是前一天持有，另一种是前一天不持有且前一天无交易，但这一天刚刚买入。
最终答案为max(f[n - 1], g[n - 1])，即最后一天不持有股票的两种情况。
优化
注意到状态转移之和前一层有关，故可以优化掉第一维。
每次提前取出前一层的值，用其更新为新的值即可。
时间复杂度
遍历数组一次，时间复杂度为O(n)。