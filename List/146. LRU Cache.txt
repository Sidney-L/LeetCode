Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?


算法
(双链表+哈希) O(1)
使用两个双链表和一个哈希表：

第一个双链表存储未被使用的位置；
第二个双链表存储已被使用的位置，且按最近使用时间从左到右排好序；
哈希表存储key对应的链表中的节点地址；
初始化：

第一个双链表插入 n 个节点，n 是缓存大小；
第二个双链表和哈希表都为空；
get(key)：
首先用哈希表判断key是否存在：

如果key存在，则返回对应的value，同时将key对应的节点放到第二个双链表的最左侧；
如果key不存在，则返回-1；
set(key, value)：
首先用哈希表判断key是否存在：

如果key存在，则修改对应的value，同时将key对应的节点放到第二个双链表的最左侧；
如果key不存在：
如果缓存已满，则删除第二个双链表最右侧的节点（上次使用时间最老的节点），同时更新三个数据结构；
插入(key, value)：从第一个双链表中随便找一个节点，修改节点权值，然后将节点从第一个双链表删除，插入第二个双链表最左侧，同时更新哈希表；
时间复杂度分析：双链表和哈希表的增删改查操作的时间复杂度都是 O(1)，所以get和set操作的时间复杂度也都是 O(1)。