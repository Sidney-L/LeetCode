Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.

算法
(链表，指针扫描) O(n)
这题的思路很巧妙，我们先给出做法，再介绍原理。

算法步骤：

用两个指针分别从两个链表头部开始扫描，每次分别走一步；
如果指针走到null，则从另一个链表头部开始走；
当两个指针相同时，
如果指针不是null，则指针位置就是相遇点；
如果指针是 null，则两个链表不相交；

1. 两个链表不相交：
 
a,b分别代表两个链表的长度，则两个指针分别走 a+b 步后都变成 null。

2. 两个链表相交：
 
则两个指针分别走 a+b+c步后在两链表交汇处相遇。

时间复杂度分析：每个指针走的长度不大于两个链表的总长度，所以时间复杂度是 O(n)。