Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

算法1 动态规划
Time O(n^2) O(n)
用一个bool数组dp[i]表示s[1..i]是否能被break，例如dp[1]表示s第一个字符之前能否满足条件。
dp[0]= true
遍历数组s，判断有没有某个断点j刚好可以满足s[j,i]在词典中，且dp[j]为真（recurrence）

返回dp[s.size()，表示s[0:s.size()]s[0:s.size()]是否为断点
Time O(n2)：两层for loop

Space O(n) for dp[n+1]
