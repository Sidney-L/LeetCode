Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?

算法1
We use an extra array in which we place every element of the array at its correct position i.e. the number at index ii in the original array is placed at the index (i+k)%(length of array)(i+k). Then, we copy the new array to the original one.

Time complexity : O(n). One pass is used to put the numbers in the new array. And another pass to copy the new array to the original one.

Space complexity : O(k). Another array of the same size is used.

算法2 Using Cyclic Replacements
Complexity Analysis
Time complexity : O(n). Only one pass is used.
Space complexity : O(1). Constant extra space is used.

算法3
(操作分解，数组翻转) O(n)
一个复杂度最优的做法。这道题目的数据比较坑，kk 可能非常大，超出数组长度，所以我们要先将 kk 对数组长度取模，然后可以将数组的旋转操作分解为三次翻转操作：
将整个数组翻转；
将前k个数翻转；
将后 n−k 个数翻转，其中 n 是数组长度；
空间复杂度分析：所有翻转操作均基于交换两个数的操作：swap()，该函数仅使用一个额外的变量，所以整个程序仅使用额外 O(1) 的空间。
时间复杂度分析：总共3次翻转操作，数组中的每个数总共被遍历两次。所以时间复杂度是 O(n)。