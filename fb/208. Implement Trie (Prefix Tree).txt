Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


(Trie树) O(S)
首先需要定义树中每个结点的结构，包含26个儿子的指针和一个bool变量代表是否是一个单词的结尾。
插入时沿着根节点向下寻找，如果不存在该路径，则通过创建结点来生成路径。
查询和查询前缀时沿着路径查找即可。
时间复杂度
单次操作的时间复杂度和字符串长度一致。

Trie is a rooted tree. Its nodes have the following fields:

Maximum of RR links to its children, where each link corresponds to one of RR character values from dataset alphabet. In this article we assume that RR is 26, the number of lowercase latin letters.
Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.

https://leetcode.com/problems/implement-trie-prefix-tree/solution/