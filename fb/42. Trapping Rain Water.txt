Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

算法1
(三次线性扫描) O(n)
观察整个图形，想办法分解计算水的面积。
注意到，每个矩形条上方所能接受的水的高度，是由它左边最高的矩形，和右边最高的矩形决定的。具体地，假设第 i 个矩形条的高度为 height[i]，且矩形条左边最高的矩形条的高度为 left_max[i]，右边最高的矩形条高度为 right_max[i]，则该矩形条上方能接受水的高度为 min(left_max[i], right_max[i]) - height[i]。
需要分别从左向右扫描求 left_max，从右向左求 right_max，最后统计答案即可。
注意特判 n==0。

算法2
(单调栈) O(n)
换一种思路，考虑每个位置左边和右边第一个比它高的位置的矩形条，以及三个矩形条构成的U型。
维护单调递减的单调栈，在每次出栈时，i即为当前栈顶st.top()位置第一个比它高的矩形的位置，弹出栈顶，并将当前栈顶记为top。
假设此时栈中仍然存在矩形，现在st.top()、top与i三个位置构成一个U型，其中top位置代表U型的底部，此时可以计算出该U型所能接受的水的面积为(i−st.top()−1)∗(min(height[st.top()],height[i])−height[top])。
如果想不清楚，建议根据代码在纸上模拟一下数据[3, 0, 0, 1, 0, 2, 0, 4]，这个例子中总共会出现五次U型。
时间复杂度
每个元素最多进栈一次出栈一次，故只需要O(n)的时间。
