You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.

算法1
O(n^2)
用hashmap 扫描一遍记录各元素的位置，但时间仍是平方

算法2
O(n)
(哈希表+单调栈) O(n)
首先将 nums2 里的所有元素存入 map 中，方便确定 nums1 中元素在 nums2中的位置。
对 nums2 中的每个元素，需要求其右边第一个比其大的元素，这里可以用 单调栈 来实现。建立一个单调递减的栈，如果新入栈的元素比栈顶元素值要大，则栈顶出栈，直到不比栈顶元素大为止。栈顶出栈的过程中，就已经确定了其右边第一个比其大的元素就是最后要新入栈的元素。
时间复杂度
哈希表的时间复杂度为 O(n)，单调栈的时间复杂度为 O(n)，故总时间复杂度为 O(n)。
