Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
Note:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.

算法
(前缀和，哈希表) O(n)
连续子数组的和可以由两个前缀和相减得到。
而子数组的和是 k 的整数倍该和模 k 等于 0，所以如果两个前缀和在模 k 下相等，则说明找到了一个连续子数组的和是 k 的倍数。
故可以使用哈希表 unordered_set 从前到后记录有哪些模 k 后的前缀和已经存在。
遍历时，首先判断当前从 [0, i] (i > 1) 的前缀和模 k 是否已经出现在哈希表中。若出现则返回 true；否则将该和加入到哈希表中。
注意，哈希表初始时应该加入 0 和 nums[i] % k 两个数字。
此题需要注意数组为空和 k = 0 的特殊情况。