Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:

Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"
Note:

If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
算法
(滑动窗口) O(n)
首先用哈希表统计出 T 中所有字符出现的次数，哈希表可以用C++中的 unordered_map，不了解用法的同学可以点这里。
然后我们用两个指针 i,j(i≥j)来扫描整个字符串，同时用一个哈希表统计 i,j 之间每种字符出现的次数，每次遍历需要的操作如下：

加入 s[i]，同时更新哈希表；
检查 s[j] 是否多余，如果是，则移除 s[j]；
检查当前窗口是否已经满足 T 中所有字符，如果是，则更新答案；
时间复杂度分析：两个指针都严格递增，最多移动 n 次，所以总时间复杂度是 O(n)。